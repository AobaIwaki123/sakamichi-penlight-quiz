---
alwaysApply: true
description: "PR作成時のセマンティックバージョニングラベル付けルール"
---

# PR作成時のセマンティックバージョニングラベル付けルール

## 必須要件
**すべてのPRに対して、変更の影響度に応じて以下のラベルのうち1つを必ず付与する：**

### ラベル分類

#### `major` - 破壊的変更（Breaking Changes）
以下のような変更には必ず`major`ラベルを付与：

- **既存APIの削除・変更**
  - 関数・メソッドのシグネチャ変更
  - 既存エンドポイントの削除・変更
  - 戻り値の型や構造の変更

- **データベーススキーマの破壊的変更**
  - テーブル・カラムの削除
  - データ型の変更
  - 制約の追加による既存データへの影響

- **設定ファイル形式の変更**
  - 環境変数の削除・名前変更
  - 設定ファイル構造の変更
  - 必須パラメータの追加

- **依存関係の大幅な更新**
  - Node.js、React等のメジャーバージョンアップ
  - フレームワークの変更
  - 互換性のないライブラリ更新

- **ユーザーに影響する重大な仕様変更**
  - UI/UXの大幅な変更
  - 既存機能の削除
  - 操作方法の根本的な変更

#### `minor` - 新機能追加（後方互換性あり）
以下のような変更には`minor`ラベルを付与：

- **新機能・新API追加**
  - 新しいエンドポイントの追加
  - 新しい関数・メソッドの追加
  - オプショナルパラメータの追加

- **新しいコンポーネントの追加**
  - Reactコンポーネントの新規作成
  - 新しいページ・画面の追加

- **BigQueryテーブル・カラムの追加**
  - 新しいテーブルの作成
  - 既存テーブルへのカラム追加（既存データに影響なし）

- **パフォーマンス改善**
  - 処理速度の向上
  - メモリ使用量の削減
  - バンドルサイズの最適化

- **新しい依存関係の追加**
  - 新しいライブラリの導入（破壊的変更なし）

#### `patch` - バグ修正・小規模改善（後方互換性あり）
以下のような変更には`patch`ラベルを付与：

- **バグ修正**
  - 既存機能の不具合修正
  - エラーハンドリングの改善
  - データ整合性の修正

- **タイポ修正**
  - コメント・文書の誤字脱字修正
  - 変数名・関数名の軽微な修正

- **ドキュメント更新**
  - README更新
  - コメントの追加・改善
  - API文書の更新

- **コードリファクタリング（機能変更なし）**
  - コード構造の改善
  - 重複コードの統合
  - 命名の改善（外部APIに影響なし）

- **デザイン調整・UI改善**
  - スタイルの微調整
  - レスポンシブ対応の改善
  - アクセシビリティの向上

- **ログメッセージの改善**
  - ログレベルの調整
  - ログ出力内容の改善

## 判断基準

### 迷った場合の判断フロー
1. **既存の呼び出し方法が変わる？** → `major`
2. **新しい機能が追加される？** → `minor` 
3. **既存機能の修正・改善のみ？** → `patch`

### 具体的な判断例

#### `major`の例
```typescript
// 既存関数の引数を変更（破壊的変更）
- function getMember(id: number): Member
+ function getMember(id: number, includeGraduated: boolean): Member
```

#### `minor`の例
```typescript
// 新しいオプショナル引数を追加（後方互換性あり）
- function getMember(id: number): Member
+ function getMember(id: number, options?: GetMemberOptions): Member
```

#### `patch`の例
```typescript
// 内部実装のバグ修正（外部インターフェース変更なし）
function getMember(id: number): Member {
-  return members.find(m => m.id == id); // バグ：厳密等価でない
+  return members.find(m => m.id === id); // 修正：厳密等価を使用
}
```

## PR作成テンプレート

PRを作成する際は、以下の形式で影響度を明記する：

```markdown
## 変更内容
[変更内容の説明]

## 影響度
**ラベル**: `major` / `minor` / `patch`

**理由**: [該当するラベルを選択した理由]

## 影響範囲
- [具体的な影響範囲を記載]

## テスト
- [ ] ユニットテスト追加済み
- [ ] 手動テスト完了
- [ ] 回帰テスト確認済み
```

## 注意事項

- **必ず1つのラベルを選択する**：複数のラベルは付けない
- **迷った場合は上位ラベルを選択**：`patch`か`minor`か迷った場合は`minor`
- **レビュー時にラベルの妥当性も確認**：レビュアーはラベルが適切かも確認する
- **リリース時の参考情報**：このラベルを基にセマンティックバージョニングを行う