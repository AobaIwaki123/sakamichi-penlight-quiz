---
description: "DataformデータパイプラインとBigQueryテーブル定義"
globs: definitions/**,workflow_settings.yaml
---

# Dataformデータパイプラインガイド

## パイプライン設定
- **Dataform設定**: [workflow_settings.yaml](mdc:workflow_settings.yaml)
- **プロジェクト**: `sakamichipenlightquiz`
- **ロケーション**: `US`
- **デフォルトデータセット**: `hinatazaka`
- **Dataformコアバージョン**: `3.0.0`

## データパイプラインフロー

### 1. ソーステーブル
[definitions/sources/hinatazaka/](mdc:definitions/sources/hinatazaka/)に配置：
- **member_info.js**: ベースメンバー情報テーブル
- **penlight.js**: ペンライト色定義
- **member_image_*.js**: 異なるコンテキスト用の各種画像ソーステーブル

### 2. 中間処理
[definitions/intermediate/hinatazaka/](mdc:definitions/intermediate/hinatazaka/)に配置：

#### member_image_master.sqlx
異なる画像ソースをマスター画像テーブルに統合。

#### member_with_image.sqlx  
メンバー情報と画像を結合：
```sql
SELECT info.*, img.type, img.url
FROM ${ref("member_info")} info
JOIN ${ref("member_image_master")} img
ON info.name = img.name
```

#### member_master.sqlx
ペンライトデータと結合する最終処理：
```sql
SELECT 
  info.*,
  penlight1.id AS penlight1_id,
  penlight2.id AS penlight2_id
FROM ${ref("member_with_image")} info
JOIN ${ref("penlight")} penlight1 ON info.penlight1 = penlight1.name_ja
JOIN ${ref("penlight")} penlight2 ON info.penlight2 = penlight2.name_ja
```

### 3. 出力テーブル
[definitions/output/sakamichi/](mdc:definitions/output/sakamichi/)に配置：

#### hinatazaka_member_master.sqlx
アプリケーションが使用する最終本番テーブル：
```sql
SELECT id, name, nickname, emoji, gen, graduated, 
       penlight1_id, penlight2_id, type, url
FROM ${ref("hinatazaka", "member_master")}
```

## データスキーマ

### メンバー情報構造
- `id`: 一意のメンバー識別子
- `name`: メンバーのフルネーム（日本語）
- `nickname`: オプションのニックネーム
- `emoji`: 代表絵文字
- `gen`: 世代（1st、2nd、3rd等）
- `graduated`: 卒業ステータス（真偽値）
- `penlight1_id`/`penlight2_id`: ペンライト色IDへの参照
- `type`: 画像コンテキストタイプ
- `url`: 画像URL

### ペンライトデータ
- `id`: 一意のペンライト色ID
- `name_ja`: 日本語色名
- 色定義がクイズオプションにマップ

## 開発ワークフロー

### Dataformでの作業
1. **VSCode拡張機能**: `vscode-dataform-tools`拡張機能を使用
2. **プロジェクトID**: VSCode設定で`sakamichipenlightquiz`に設定
3. **フォーマット**: SQLフォーマットに`dataform` CLIを使用
4. **自動分割なし**: コンパイル済みクエリは縦分割で開かない

### テーブル依存関係
```
member_info ─┐
             ├─→ member_with_image ─┐
member_image_master ──────────────┘  │
                                     ├─→ member_master ─→ hinatazaka_member_master
penlight ────────────────────────────┘
```

### ベストプラクティス
- テーブル参照には`${ref()}`関数を使用
- すべてのテーブルに説明付きの`config`ブロックを含める
- 一貫した命名規則を維持
- 最終出力前に中間テーブルをテスト
- ソース宣言は最小限で焦点を絞って保つ
