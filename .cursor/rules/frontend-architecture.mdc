---
description: "フロントエンド開発のアーキテクチャとNext.js構成"
globs: view/**
---

# フロントエンド開発ガイド

## 技術スタック
- **フレームワーク**: Next.js 15 (App Router)
- **UI ライブラリ**: Mantine UI v7.17.4
- **状態管理**: Zustand v5.0.3
- **言語**: TypeScript 5.8.3
- **スタイリング**: CSS Modules + PostCSS
- **PWA**: next-pwa v5.6.0

## プロジェクト構成

### ディレクトリ構造
- `view/app/` - Next.js App Routerのページとレイアウト
- `view/components/` - 機能別に整理されたReactコンポーネント
- `view/stores/` - Zustand状態管理ストア
- `view/api/` - データ取得用API関数
- `view/types/` - TypeScript型定義
- `view/consts/` - アプリケーション定数とフィルター
- `view/hooks/` - カスタムReactフック

### 主要コンポーネント

#### ホーム画面
- [Home.tsx](mdc:view/components/Home/Home.tsx) - メインクイズインターフェース
- [MemberInfo.tsx](mdc:view/components/Home/MemberInfo/MemberInfo.tsx) - メンバー情報表示
- [PenlightForm.tsx](mdc:view/components/Home/PenlightForm/PenlightForm.tsx) - クイズ回答フォーム

#### ヘッダー・フッター
- [Header.tsx](mdc:view/components/Header/Header.tsx) - アプリケーションヘッダー
- [Footer.tsx](mdc:view/components/Footer/Footer.tsx) - フッター部分

#### エラーハンドリング
- [error.tsx](mdc:view/app/error.tsx) - エラーページ
- [not-found.tsx](mdc:view/app/not-found.tsx) - 404ページ

## 状態管理

### Zustandストア
- [useSelectedMemberStore.ts](mdc:view/stores/useSelectedMemberStore.ts) - メンバー選択・フィルタリング
- [useColorStore.ts](mdc:view/stores/useColorStore.ts) - ペンライト色の管理
- [useFilterStore.ts](mdc:view/stores/useFilterStore.ts) - フィルター状態
- [useAnswerTriggerStore.ts](mdc:view/stores/useAnswerTriggerStore.ts) - 回答トリガー
- [useAnswerCloseTriggerStore.ts](mdc:view/stores/useAnswerCloseTriggerStore.ts) - 回答終了トリガー

### 状態管理パターン
```typescript
export const useSelectedMemberStore = create<State>((set, get) => ({
  // 状態の初期値
  selectedGroup: 'hinatazaka',
  allMembers: [],
  filteredMembers: [],
  
  // アクション
  setGroup: async (group) => {
    const members = await getGroupMembers(group)
    set({ allMembers: members })
  }
}))
```

## UI・UXガイドライン

### モバイル優先設計
- 縦画面（ポートレート）での表示を最適化
- 横画面のレスポンシブ対応は限定的
- タッチインターフェースを重視

### Mantineテーマ
- [theme.ts](mdc:view/theme.ts) でカスタムテーマを定義
- ダークモード・ライトモード対応
- カラーパレットは日向坂46ブランドに合わせて調整

### PWA機能
- [manifest.json](mdc:view/public/manifest.json) でPWA設定
- Service Workerによるオフライン対応
- アプリアイコン: icon512_maskable.jpg, icon512_rounded.jpg

## 開発環境

### 開発サーバー
```bash
cd view/
pnpm dev  # 開発サーバー起動（ポート3000）
```

### テスト
- **フレームワーク**: Jest + React Testing Library
- **設定**: [jest.config.js](mdc:view/jest.config.js)
- **セットアップ**: [jest.setup.js](mdc:view/jest.setup.js)
- **テストファイル**: `view/__tests__/` ディレクトリ

### Docker開発環境
- [Dockerfile](mdc:view/Dockerfile) で多段階ビルド
- 開発ステージ: pnpm使用
- 本番ステージ: Distrolessイメージ

## コーディング規約

### TypeScript
- 厳密な型定義を使用
- interfaceでデータ構造を明確に定義
- [types/](mdc:view/types/) ディレクトリで型を管理

### コンポーネント設計
- 機能単位でディレクトリを分割
- CSS Modulesでスタイルを分離
- propsは明確な型定義を行う

### 命名規則
- ファイル名: PascalCase (React コンポーネント)
- ディレクトリ名: PascalCase
- 変数・関数: camelCase
- 定数: UPPER_SNAKE_CASE

## API通信

### BigQuery連携
- [getHinatazakaMember.ts](mdc:view/api/bq/getHinatazakaMember.ts) でBigQueryからデータ取得
- 開発モードではモックデータを使用
- 本番環境ではBigQueryに直接クエリ

### エラーハンドリング
- try-catch文でエラーを適切にキャッチ
- ユーザーフレンドリーなエラーメッセージ表示
- ローディング状態の管理

## 日本語対応

### 文字コード
- UTF-8を使用
- 日本語文字列は適切にエスケープ

### コメント・ドキュメント
- コードコメントは日本語で記述
- 関数・コンポーネントの説明は日本語
- 変数名は英語、コメントは日本語の併用

### UI文言
- すべてのユーザー向けテキストは日本語
- エラーメッセージも日本語で表示

## プロジェクト統計 (最終更新: 2025-09-11 19:41:51)

- Reactコンポーネント数:       27
- Zustandストア数:        7
- カスタムフック数:        1
- API関数数:        9
- 最終更新PR: #manual

