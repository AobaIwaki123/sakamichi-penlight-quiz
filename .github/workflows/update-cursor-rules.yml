name: update-cursor-rules
run-name: Cursor Rules 自動更新

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: read

defaults:
  run:
    shell: bash

jobs:
  update-cursor-rules:
    # PRがマージされた場合のみ実行
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: PR情報の取得
        id: pr-info
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          MERGED_AT=$(date '+%Y-%m-%d %H:%M:%S')
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "labels=$LABELS" >> $GITHUB_OUTPUT
          echo "merged_at=$MERGED_AT" >> $GITHUB_OUTPUT
          
          echo "=== PR情報 ==="
          echo "Number: $PR_NUMBER"
          echo "Title: $PR_TITLE"
          echo "Labels: $LABELS"
          echo "Merged at: $MERGED_AT"

      - name: 変更されたファイルの分析
        id: analyze-changes
        run: |
          echo "=== マージされた変更の分析 ==="
          
          # マージコミットから変更ファイルを取得
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD^2 HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # 更新が必要なrulesファイルを特定
          RULES_TO_UPDATE=""
          
          # フロントエンド関連
          if echo "$CHANGED_FILES" | grep -E '^view/(components|stores|hooks|types|app)/' > /dev/null; then
            RULES_TO_UPDATE="$RULES_TO_UPDATE frontend-architecture"
            echo "✅ フロントエンドアーキテクチャの更新が必要"
          fi
          
          # API/BigQuery関連
          if echo "$CHANGED_FILES" | grep -E '^view/api/|^definitions/' > /dev/null; then
            RULES_TO_UPDATE="$RULES_TO_UPDATE dataform-pipeline bigquery-integration"
            echo "✅ データパイプライン・BigQuery統合の更新が必要"
          fi
          
          # インフラ関連
          if echo "$CHANGED_FILES" | grep -E '^k8s/|^\.github/workflows/|Dockerfile' > /dev/null; then
            RULES_TO_UPDATE="$RULES_TO_UPDATE deployment-infrastructure"
            echo "✅ デプロイメント・インフラの更新が必要"
          fi
          
          # コーディング規約関連（新しいlintルール、設定ファイル）
          if echo "$CHANGED_FILES" | grep -E '\.(eslintrc|prettier|tsconfig)' > /dev/null; then
            RULES_TO_UPDATE="$RULES_TO_UPDATE coding-standards"
            echo "✅ コーディング規約の更新が必要"
          fi
          
          echo "rules_to_update=$RULES_TO_UPDATE" >> $GITHUB_OUTPUT

      - name: プロジェクト概要の更新
        if: contains(github.event.pull_request.labels.*.name, 'minor') || contains(github.event.pull_request.labels.*.name, 'major')
        run: |
          RULES_FILE=".cursor/rules/project-overview.mdc"
          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          PR_TITLE="${{ steps.pr-info.outputs.pr_title }}"
          MERGED_AT="${{ steps.pr-info.outputs.merged_at }}"
          LABELS="${{ steps.pr-info.outputs.labels }}"
          
          echo "" >> "$RULES_FILE"
          echo "## 更新履歴" >> "$RULES_FILE"
          echo "" >> "$RULES_FILE"
          echo "### $MERGED_AT - PR #$PR_NUMBER" >> "$RULES_FILE"
          echo "- **変更内容**: $PR_TITLE" >> "$RULES_FILE"
          echo "- **影響度**: $LABELS" >> "$RULES_FILE"
          echo "" >> "$RULES_FILE"
          
          echo "✅ プロジェクト概要を更新しました"

      - name: フロントエンドアーキテクチャの更新
        if: contains(steps.analyze-changes.outputs.rules_to_update, 'frontend-architecture')
        run: |
          RULES_FILE=".cursor/rules/frontend-architecture.mdc"
          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          MERGED_AT="${{ steps.pr-info.outputs.merged_at }}"
          
          # コンポーネント数をカウント
          COMPONENT_COUNT=$(find view/components -name "*.tsx" | wc -l)
          STORE_COUNT=$(find view/stores -name "*.ts" | wc -l)
          HOOK_COUNT=$(find view/hooks -name "*.tsx" | wc -l)
          
          # フロントエンド統計情報を更新
          echo "" >> "$RULES_FILE"
          echo "## プロジェクト統計 (最終更新: $MERGED_AT)" >> "$RULES_FILE"
          echo "" >> "$RULES_FILE"
          echo "- Reactコンポーネント数: $COMPONENT_COUNT" >> "$RULES_FILE"
          echo "- Zustandストア数: $STORE_COUNT" >> "$RULES_FILE"
          echo "- カスタムフック数: $HOOK_COUNT" >> "$RULES_FILE"
          echo "- 最終更新PR: #$PR_NUMBER" >> "$RULES_FILE"
          
          echo "✅ フロントエンドアーキテクチャ情報を更新しました"

      - name: データパイプライン設定の更新
        if: contains(steps.analyze-changes.outputs.rules_to_update, 'dataform-pipeline')
        run: |
          RULES_FILE=".cursor/rules/dataform-pipeline.mdc"
          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          MERGED_AT="${{ steps.pr-info.outputs.merged_at }}"
          
          # SQLファイル数をカウント
          SQL_COUNT=$(find definitions -name "*.sqlx" | wc -l)
          
          echo "" >> "$RULES_FILE"
          echo "## データパイプライン統計 (最終更新: $MERGED_AT)" >> "$RULES_FILE"
          echo "" >> "$RULES_FILE"
          echo "- Dataform SQLファイル数: $SQL_COUNT" >> "$RULES_FILE"
          echo "- 最終更新PR: #$PR_NUMBER" >> "$RULES_FILE"
          
          echo "✅ データパイプライン設定を更新しました"

      - name: デプロイメント設定の更新
        if: contains(steps.analyze-changes.outputs.rules_to_update, 'deployment-infrastructure')
        run: |
          RULES_FILE=".cursor/rules/deployment-infrastructure.mdc"
          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          MERGED_AT="${{ steps.pr-info.outputs.merged_at }}"
          
          echo "" >> "$RULES_FILE"
          echo "## インフラ更新履歴 (最終更新: $MERGED_AT)" >> "$RULES_FILE"
          echo "" >> "$RULES_FILE"
          echo "- PR #$PR_NUMBER による設定更新" >> "$RULES_FILE"
          
          echo "✅ デプロイメント設定を更新しました"

      - name: 最終更新時刻の記録
        run: |
          TIMESTAMP="${{ steps.pr-info.outputs.merged_at }}"
          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          
          echo "最終更新: $TIMESTAMP" > .cursor/rules/.last-update
          echo "更新PR: #$PR_NUMBER" >> .cursor/rules/.last-update
          
          echo "✅ 更新時刻を記録しました"

      - name: 変更をコミット・プッシュ
        run: |
          # Git設定
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 変更があるかチェック
          if git diff --quiet .cursor/rules/; then
            echo "📝 Cursor Rulesに変更はありませんでした"
            exit 0
          fi
          
          # 変更内容を表示
          echo "=== Cursor Rules の変更内容 ==="
          git diff .cursor/rules/
          
          # コミット・プッシュ
          git add .cursor/rules/
          git commit -m "auto: Cursor Rules更新 (PR #${{ steps.pr-info.outputs.pr_number }})"
          git push
          
          echo "✅ Cursor Rulesの更新をコミット・プッシュしました"

      - name: 更新完了の通知
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            
            const comment = `## 🔄 Cursor Rules 自動更新完了\n\n` +
              `PR #${pull_number} のマージに伴い、Cursor Rulesが自動更新されました。\n\n` +
              `### 更新されたファイル\n` +
              `${{ steps.analyze-changes.outputs.rules_to_update }}\n\n` +
              `### 詳細\n` +
              `- 更新日時: ${{ steps.pr-info.outputs.merged_at }}\n` +
              `- 変更ラベル: ${{ steps.pr-info.outputs.labels }}\n\n` +
              `---\n` +
              `*この更新は自動実行されました。変更内容は [こちら](https://github.com/${owner}/${repo}/tree/main/.cursor/rules) で確認できます。*`;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: comment
            });